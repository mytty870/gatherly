// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  profileId     String?
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Profile {
  id             String   @id @default(cuid())
  // アバター画像用のURL
  avatarUrl      String?
  // ユーザー名(変更不可)
  userName       String?  @unique
  // 表示名
  displayName    String?
  // 自己紹介文
  bio            String?
  // Zenn の ユーザー名
  zennUserName   String?
  // Qiita の ユーザー名
  quiitaUserName String?
  // Note の ユーザー名
  noteUserName   String?
  // しずかなインターネットの ユーザー名
  sizuUserName   String?
  // GitHub の ユーザー名
  githubUserName String?
  // Twitter の ユーザー名
  twiterUserName String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
